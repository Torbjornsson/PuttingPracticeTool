// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PuttingPracticeBackend.Data;

#nullable disable

namespace PuttingPracticeBackend.Migrations
{
    [DbContext(typeof(PuttingPracticeDataContext))]
    [Migration("20230315204928_AddRounds")]
    partial class AddRounds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0-rc.1.22426.7");

            modelBuilder.Entity("PuttingPracticeBackend.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("PuttingPracticeBackend.Models.Shots", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DistanceInCm")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JsonListOfAttributes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RoundId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShotsMade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShotsMax")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("Shots");
                });

            modelBuilder.Entity("PuttingPracticeBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PuttingPracticeBackend.Models.Round", b =>
                {
                    b.HasOne("PuttingPracticeBackend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PuttingPracticeBackend.Models.Shots", b =>
                {
                    b.HasOne("PuttingPracticeBackend.Models.Round", null)
                        .WithMany("ListOfShots")
                        .HasForeignKey("RoundId");
                });

            modelBuilder.Entity("PuttingPracticeBackend.Models.Round", b =>
                {
                    b.Navigation("ListOfShots");
                });
#pragma warning restore 612, 618
        }
    }
}
